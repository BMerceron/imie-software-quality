<?php

require_once "../Constantes.php";
//require_once "../PDO/connectionPDO.php";
require_once "../metier/Adresse.php";
require_once "../PDO/AdresseDB.php";

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-06 at 09:31:01.
 */
class AdresseDBTest extends PHPUnit_Framework_TestCase {

    /**
     * @var AdresseDB
     */
    protected $object;
    protected $pdodb;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        //parametre de connexion à la bae de donnée
       $strConnection = Constantes::TYPE . ':host=' . Constantes::HOST . ';dbname=' . Constantes::BASE;
        $arrExtraParam = array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8");
        $this->pdodb = new PDO($strConnection, Constantes::USER, Constantes::PASSWORD, $arrExtraParam); //Ligne 3; Instancie la connexion
        $this->pdodb->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers AdresseDB::ajout
     * @todo   Implement testAjout().
     */
    public function testAjout() {
        try {
            $this->object = new AdresseDB($this->pdodb);
         $a = new Adresse("32", "rue sainte croix", "44000", "Nantes");

          $this->object->ajout($a, "4");

          $adr = $this->object->selectAdresse($a->getId());
            $this->assertEquals($a->getNumero(), $adr->getNumero());
            $this->assertEquals($a->getRue(), $adr->getRue());
            $this->assertEquals($a->getCodePostal(), $adr->getCodePostal());
            $this->assertEquals($a->getVille(), $adr->getVille());
        } catch (Exception $e) {
            echo 'Exception recue : ', $e->getMessage(), "\n";
        }
    }

    /**
     * @covers AdresseDB::suppression
     * @todo   Implement testSuppression().
     */
    public function testSuppression() {
        try{
 
    $this->object = new AdresseDB($this->pdodb);
         $a = new Adresse("42", "rue du Moulin", "75000", "Paris");

          $this->object->ajout($a, "5");
          

  $adr=$this->object->selectAdresse($this->object->last_id);
$nb=$this->object->suppression($adr);

if($nb==0){
      $this->markTestIncomplete(
                'This test delete not ok.'
        );
}
    }  catch (Exception $e){
        //verification exception
        $exception="RECORD ADRESSE not present in DATABASE";
        $this->assertEquals($exception,$e->getMessage());

    }
         
    }

    /**
     * @covers AdresseDB::update
     * @todo   Implement testUpdate().
     */
    public function testUpdate() {
      $this->object = new AdresseDB($this->pdodb);
  $a=new Adresse("26", "boulevard victor Hugo","44000","Nantes");
$a->setId("11");
$this->object->update($a);   
 //TODO  à finaliser 
    }

    /**
     * @covers AdresseDB::selectAll
     * @todo   Implement testSelectAll().
     */
    public function testSelectAll() {
       $this->object = new AdresseDB($this->pdodb);
    $res=$this->object->selectAll();
    $i=0;
   foreach ($res as $key=>$value) {
       $i++; 
   }


if($i==0){
       $this->markTestIncomplete(
                'Pas de résultats'
        );
    
}
    print_r($res);
    
    }

    /**
     * @covers AdresseDB::selectAdresse
     * @todo   Implement testSelectAdresse().
     */
    public function testSelectIdAdresse() {
        $this->object = new AdresseDB($this->pdodb);
         $a=$this->object->selectAdresse(1);
         $adr=$this->object->selectAdresse($a->getId());
           $this->assertEquals($a->getNumero(), $adr->getNumero());
            $this->assertEquals($a->getRue(), $adr->getRue());
            $this->assertEquals($a->getCodePostal(), $adr->getCodePostal());
            $this->assertEquals($a->getVille(), $adr->getVille());
    }

}
